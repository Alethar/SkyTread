// Throttle Yaw Pitch Roll
const int THROTTLE = 0;
const int YAW = 1;
const int PITCH = 2;
const int ROLL = 3; 
const int VRA = 4;
const int VRB = 5;

//PWM values
const int mins = 980;
const int defs = 1470;
const int maxs = 1960;
const int period = 18220;
const int deadzone = 5;

//Relay Pin values
const int TLEFT = 0;
const int TRIGHT = 1;
const int RLEFT = 2;
const int RRIGHT = 3;
const int ELEFT = 4;
const int ERIGHT = 5;
const int ALEFT = 6;
const int ARIGHT = 7;

//PINS              T     Y     P     R   VRA  VRB
int iPins [6] = {  23,   25,   27,   29,   31,  33 };
int vals [6] = { mins, defs, defs, defs, defs, defs};
int diff [6] = {   0,     0,    0,    0,    0,   0 };
//RELAY PINS       TL    TR    YL    YR    PL    PR    RL    RR
int oPins[8] = {    2,    3,    4,    5,    6,    7,    8,    9 };
int oPinVals[8] = { 0,    0,    0,    0,    0,    0,    0,    0 };



void setup() {
  for (int i=0; i<6; i++) {
    pinMode(iPins[i], INPUT);
    pinMode(oPins[i], OUTPUT);
  }
  
  Serial.begin(115200);
}

void loop(){
  input();
  calc();
  scale();
  //relay();
  relayTest();
}

void input(){
  for (int i = 0; i < 2; i++) {// CHANGE TO 6
    vals[i] = pulseIn(iPins[i], HIGH);
    //if(i == 2){
    //periods = vals[i] + pulseIn(iPins[i], LOW);
    //}
  }
}

void calc(){
  //Calculating differential thrust
  diff[THROTTLE] = vals[THROTTLE] - mins;
  for(int i = 1; i < 4; i++){
    diff[i] = vals[i] - defs;
  }

  //Throttle output
  oPinVals[TLEFT] = vals[THROTTLE] + diff[YAW] / 2;
  oPinVals[TRIGHT] = vals[THROTTLE] - diff[YAW] / 2;

  if(diff[YAW] > deadzone) {
    if (oPinVals[TLEFT] > maxs) {
      oPinVals[TRIGHT] -= oPinVals[TLEFT] - maxs;
      oPinVals[TLEFT] = maxs;
    }
    else if (oPinVals[TRIGHT] < mins) {
      oPinVals[TLEFT] += mins - oPinVals[TRIGHT];
      oPinVals[TRIGHT] = mins;
    }
  }

  else if(diff[YAW] < -deadzone) {
    if (oPinVals[TRIGHT] > maxs) {
      oPinVals[TLEFT] -= oPinVals[TRIGHT] - maxs;
      oPinVals[TRIGHT] = maxs;
    }
    else if (oPinVals[TLEFT] < mins) {
      oPinVals[TRIGHT] += mins - oPinVals[TLEFT];
      oPinVals[TLEFT] = mins;
    }
  }
  
  oPinVals[2] = vals[YAW]; // rudders
  oPinVals[3] = vals[YAW];
  oPinVals[4] = vals[2]; // elevators
  oPinVals[5] = vals[2];
  oPinVals[6] = vals[3]; // ailerons
  oPinVals[7] = vals[3];
}

void scale(){
  for(int i = 0; i < 6; i++){ // CHANGE TO 8
    long v = long(oPinVals[i]) * 256 / period;
    oPinVals[i] = v;
  }
  
}

void relay() {
  for (int i = 0; i < 8; i++) {
    analogWrite(oPins[i], oPinVals[i]);
  }
}

void relayTest(){
  for (int i = 0; i < 8; i++) {
    Serial.print("Pin number ");
    Serial.print(i);
    Serial.print("  :  ");
    Serial.println(oPins[i], oPinVals[i]);
  }
}
